//==========================================================================================================
// cthread.cpp - Implements a base class for conveniently creating worker threads
//==========================================================================================================
#include "cthread.h"
#include <thread>
#include <mutex>

using namespace std;

//==========================================================================================================
// This is a count of how many threads are still running
//==========================================================================================================
int CThread::m_running_threads = 0;
//==========================================================================================================


//==========================================================================================================
// This is a count of how many threads have been constructed
//==========================================================================================================
int CThread::m_constructed_threads = 0;
//==========================================================================================================


//==========================================================================================================
// Constructor() - Assigns a unique index number to this thread
//==========================================================================================================
CThread::CThread()
{
    m_thread_index = ++m_constructed_threads;
}
//==========================================================================================================


//==========================================================================================================
// entry_point() - This is the entry point when a thread is spawned
//==========================================================================================================
void CThread::entry_point()
{
    static mutex mtx;
    
    // We now have one more thread running
    mtx.lock();
    ++m_running_threads;
    mtx.unlock();

    // Start main() in the dervied class
    main();
    
    // We now have one fewer threads running
    mtx.lock();
    --m_running_threads;
    mtx.unlock();
}
//==========================================================================================================


//==========================================================================================================
// spawn() - Spawns the thread
//==========================================================================================================
void CThread::spawn(const void* p1, const void* p2, const void* p3, const void* p4)
{
    // Fill in the startup parameters
    m_p1 = (void*)p1;
    m_p2 = (void*)p2;
    m_p3 = (void*)p3;
    m_p4 = (void*)p4;

    // Spin up "entry_point" 
    m_thread = std::thread(&CThread::entry_point, this);
}
//==========================================================================================================

